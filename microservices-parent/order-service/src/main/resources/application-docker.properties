spring.application.name=order-service
server.port=8082

spring.datasource.url=jdbc:postgresql://host.docker.internal:5433/order-service
spring.datasource.username=admin
spring.datasource.password=password

# none, validate, update, create, create-drop
spring.jpa.hibernate.ddl-auto=update

spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

inventory.service.url=http://inventory-service:8083/api/inventory

eureka.client.service-url.defaultZone=http://discovery-service:8761/eureka

# Spring Actuator for Order-Service
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j Configurations
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# determine how many events can be stored in the ring buffer
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# sliding window type can be either COUNT_BASED or TIME_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# number of calls which are needed to determine if the circuit breaker should be opened or closed
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# sets the failure rate threshold in percentage
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# sets the wait duration which specifies how long the CircuitBreaker should stay open, before it switches to half open
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# sets the permitted number of calls when the CircuitBreaker is half open
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# enables automatic transition from OPEN to HALF_OPEN state once the wait duration has passed
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4j TimeLimiter Configurations
resilience4j.timelimiter.instances.inventory.timeoutDuration=3s

#Resilience4j Retry Configurations
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#Zipkin
# is used to configure the endpoint where the traces are sent to
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name},%X{traceId:-},%X{spanId:-}]

#Kafka properties
#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.template.default-topic=notificationTopic
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.type.mapping=event:ca.gbc.orderservice.events.OrderPlacedEvent